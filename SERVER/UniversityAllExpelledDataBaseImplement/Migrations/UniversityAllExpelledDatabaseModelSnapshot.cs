// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityAllExpelledDataBaseImplement;

namespace UniversityAllExpelledDataBaseImplement.Migrations
{
    [DbContext(typeof(UniversityAllExpelledDatabase))]
    partial class UniversityAllExpelledDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatementId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeReportingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.HasIndex("TypeReportingId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeReportingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeReportingId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naming")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumbGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.StudentStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Achievement")
                        .HasColumnType("int");

                    b.Property<int>("StatementId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentStatements");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.StudentTesting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestingId");

                    b.ToTable("StudentTestings");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Testing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Naming")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Testings");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.TypeReporting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TypeReportings");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.TypeReportingDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("TypeReportingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TypeReportingId");

                    b.ToTable("TypeReportingDisciplines");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.TypeReportingLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TypeReportingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TypeReportingId");

                    b.ToTable("TypeReportingLessons");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Discipline", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Statement", "Statement")
                        .WithMany("Disciplines")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Department", "Department")
                        .WithMany("Disciplines")
                        .HasForeignKey("TypeReportingId");

                    b.Navigation("Department");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Lesson", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Department", "Department")
                        .WithMany("Lessons")
                        .HasForeignKey("TypeReportingId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Statement", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Teacher", "Teacher")
                        .WithMany("Statements")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Student", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Teacher", "Teacher")
                        .WithMany("Students")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.StudentStatement", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Statement", "Statement")
                        .WithMany("StudentStatements")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Student", "Student")
                        .WithMany("StudentStatements")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.StudentTesting", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Student", "Student")
                        .WithMany("StudentTestings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Testing", "Testing")
                        .WithMany("StudentTestings")
                        .HasForeignKey("TestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Testing");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Testing", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Lesson", "Lesson")
                        .WithMany("Testings")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Teacher", "Teacher")
                        .WithMany("Testings")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.TypeReporting", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Department", "Department")
                        .WithMany("TypeReportings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.TypeReportingDiscipline", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Discipline", "Discipline")
                        .WithMany("TypeReportingDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.TypeReporting", "TypeReporting")
                        .WithMany("TypeReportingDisciplines")
                        .HasForeignKey("TypeReportingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("TypeReporting");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.TypeReportingLesson", b =>
                {
                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.Lesson", "Lesson")
                        .WithMany("TypeReportingLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityAllExpelledDataBaseImplement.Models.TypeReporting", "TypeReporting")
                        .WithMany("TypeReportingLessons")
                        .HasForeignKey("TypeReportingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("TypeReporting");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Department", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("Lessons");

                    b.Navigation("TypeReportings");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Discipline", b =>
                {
                    b.Navigation("TypeReportingDisciplines");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Lesson", b =>
                {
                    b.Navigation("Testings");

                    b.Navigation("TypeReportingLessons");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Statement", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("StudentStatements");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Student", b =>
                {
                    b.Navigation("StudentStatements");

                    b.Navigation("StudentTestings");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Teacher", b =>
                {
                    b.Navigation("Statements");

                    b.Navigation("Students");

                    b.Navigation("Testings");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.Testing", b =>
                {
                    b.Navigation("StudentTestings");
                });

            modelBuilder.Entity("UniversityAllExpelledDataBaseImplement.Models.TypeReporting", b =>
                {
                    b.Navigation("TypeReportingDisciplines");

                    b.Navigation("TypeReportingLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
